{"version":3,"sources":["component/AddTask.js","component/Task.js","component/TaskList.js","component/App.js","serviceWorker.js","index.js"],"names":["currentDate","Date","toISOString","slice","AddTask","state","text","date","checked","addText","e","_this","setState","target","value","addDate","addChecked","addTask","length","alert","props","add","react_default","a","createElement","className","type","placeholder","this","onChange","name","id","htmlFor","onClick","class","Component","Task","_props$task","task","important","active","style","color","done","delete","TaskList","tasks","filter","console","log","sort","b","finishDate","tasksActive","map","component_Task","key","tasksDone","splice","counter","App","doneTask","Array","from","forEach","getTime","deleteTask","Object","toConsumableArray","index","findIndex","addTaskApp","concat","component_AddTask","component_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_component_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0cb6682.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst currentDate = new Date().toISOString().slice(0, 10)\r\nclass AddTask extends Component {\r\n    state = {\r\n        text: \"\",\r\n        date: currentDate,\r\n        checked: false,\r\n    }\r\n\r\n    addText = e => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    addDate = e => {\r\n        this.setState({\r\n            date: e.target.value\r\n        })\r\n    }\r\n\r\n    addChecked = e => {\r\n        this.setState({\r\n            checked: e.target.checked\r\n        })\r\n    }\r\n\r\n    addTask = () => {\r\n        if (this.state.text.length > 3) {\r\n            this.props.add(this.state);\r\n            this.setState({\r\n                text: \"\",\r\n                date: currentDate,\r\n                checked: false,\r\n            })\r\n        } else {\r\n            return alert(\"Za mało znaków\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form\">\r\n                <input type=\"taxt\" placeholder=\"wpisz zadanie...\" value={this.state.text} onChange={this.addText} />\r\n                <input type=\"checkbox\" name=\"important\" id=\"important\" checked={this.state.checked} onChange={this.addChecked} />\r\n                <label htmlFor=\"important\">Priorytet</label><br />\r\n\r\n                <label htmlFor=\"date\">Do kiedy</label>\r\n                <input className=\"date\" type=\"date\" value={this.state.date} onChange={this.addDate} /><br />\r\n\r\n                <button onClick={this.addTask}><i class=\"fas fa-plus\"></i></button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\n\r\nconst Task = (props) => {\r\n    const { text, date, id, important, active } = props.task\r\n    // console.log(important)\r\n    if (active) {\r\n        return (\r\n            <div>\r\n                <p className=\"tasks\">\r\n                <div className=\"text\">\r\n                    {important ? <strong style={{ color: 'red' }}>{text}</strong> : <strong>{text}</strong>}\r\n                    </div> \r\n                    <div className='dateDoneDelete'>\r\n                     do {date}\r\n                     <div className='DoneDelete'>\r\n                    <button className=\"done\" onClick={() => props.done(id)}><i class=\"fas fa-check\"></i></button>\r\n                    <button className=\"delete\" onClick={() => props.delete(id)}><i class=\"far fa-trash-alt\"></i></button>\r\n                    </div>\r\n                    </div>\r\n                </p>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <p className=\"tasks\">\r\n                <div className=\"text\">\r\n                    <strong>{text}</strong></div> \r\n                    <div className='dateDoneDelete'>\r\n                    <em>zrobione do </em>\r\n                    <div className=\"date\">\r\n                    {date}\r\n                    </div>                \r\n                    <p>Potwierdzenie wykonania</p>\r\n                    <button className=\"deleteDone\" onClick={() => props.delete(id)}><i class=\"far fa-trash-alt\"></i></button>\r\n                    </div>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task'\r\n\r\nconst TaskList = (props) => {\r\n    // console.log(props.tasks.length)\r\n    const active = props.tasks.filter(task => task.active)\r\n    const done = props.tasks.filter(task => !task.active)\r\n    console.log(done)\r\n    // done.sort((a, b) => b.finishDate - a.finishDate)\r\n    done.sort((a, b) => {\r\n        if (a.finishDate > b.finishDate) return -1\r\n        if (a.finishDate < b.finishDate) return 1\r\n        return 0\r\n    })\r\n\r\n    active.sort((a, b) => {\r\n        if (a.text > b.text) return 1\r\n        if (a.text < b.text) return -1\r\n        return 0\r\n    })\r\n\r\n    const tasksActive = active.map(task => <Task key={task.id} task={task} delete={props.delete} done={props.done} />)\r\n\r\n    const tasksDone = done.map(task => <Task key={task.id} task={task} delete={props.delete} done={props.done} />)\r\n\r\n    return (\r\n        <div className=\"taskList\">\r\n            <h2>Zadania do zrobienia <em>({active.length})</em></h2>\r\n            {tasksActive}\r\n            <hr />\r\n\r\n            <h3>Zadania zrobione <em>({done.length})</em></h3>\r\n            {tasksDone.length > 5 && <em>lista ostatnich 5-ciu zadań</em>}\r\n            {tasksDone.splice(0, 5)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport AddTask from './AddTask';\r\nimport TaskList from './TaskList';\r\n\r\nlet counter = 9;\r\nclass App extends Component {\r\n  state = {\r\n    tasks: [\r\n\r\n     ]\r\n  }\r\n\r\n  doneTask = (id) => {\r\n    // console.log(\"done in App\");\r\n    const tasks = Array.from(this.state.tasks);\r\n    tasks.forEach(task => {\r\n      if (task.id === id) {\r\n        task.active = false\r\n        task.finishDate = new Date().getTime()\r\n      }\r\n    })\r\n    this.setState({\r\n      tasks,\r\n    })\r\n  }\r\n\r\n  deleteTask = (id) => {\r\n    console.log(\"delete in App\");\r\n    const tasks = [...this.state.tasks];\r\n    const index = tasks.findIndex(task => task.id === id);\r\n    tasks.splice(index, 1);\r\n    this.setState({\r\n      tasks\r\n    })\r\n  }\r\n\r\n  addTaskApp = (props) => {\r\n    const task = {\r\n      id: counter + 1,\r\n      text: props.text,\r\n      date: props.date,\r\n      active: true,\r\n      important: props.checked,\r\n      finishDate: new Date().getTime()\r\n    }\r\n    counter++\r\n    const tasks = [...this.state.tasks, task]\r\n\r\n    this.setState({\r\n      tasks\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"toDoApp\">\r\n          <h1>TO DO APP</h1>\r\n        </div>\r\n\r\n        <AddTask add={this.addTaskApp} />\r\n        <hr />\r\n        <TaskList tasks={this.state.tasks} done={this.doneTask} delete={this.deleteTask} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './component/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}